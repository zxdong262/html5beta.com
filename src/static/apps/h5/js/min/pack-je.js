!(function (t) { t.fn.qrcode = function (e) { function o (t) { this.mode = h, this.data = t } function r (t, e) { this.typeNumber = t, this.errorCorrectLevel = e, this.modules = null, this.moduleCount = 0, this.dataCache = null, this.dataList = [] } function i (t, e) { if (void 0 == t.length) throw Error(t.length + '/' + e); for (var o = 0; o < t.length && t[o] == 0;)o++; this.num = Array(t.length - o + e); for (let r = 0; r < t.length - o; r++) this.num[r] = t[r + o] } function n (t, e) { this.totalCount = t, this.dataCount = e } function a () { this.buffer = [], this.length = 0 } let h; o.prototype = { getLength: function () { return this.data.length }, write: function (t) { for (let e = 0; e < this.data.length; e++)t.put(this.data.charCodeAt(e), 8) } }, r.prototype = { addData: function (t) { this.dataList.push(new o(t)), this.dataCache = null }, isDark: function (t, e) { if (t < 0 || this.moduleCount <= t || e < 0 || this.moduleCount <= e) throw Error(t + ',' + e); return this.modules[t][e] }, getModuleCount: function () { return this.moduleCount }, make: function () { if (this.typeNumber < 1) { for (var t = 1, t = 1; t < 40; t++) { for (var e = n.getRSBlocks(t, this.errorCorrectLevel), o = new a(), r = 0, i = 0; i < e.length; i++)r += e[i].dataCount; for (i = 0; i < this.dataList.length; i++)e = this.dataList[i], o.put(e.mode, 4), o.put(e.getLength(), s.getLengthInBits(e.mode, t)), e.write(o); if (o.getLengthInBits() <= 8 * r) break } this.typeNumber = t } this.makeImpl(!1, this.getBestMaskPattern()) }, makeImpl: function (t, e) { this.moduleCount = 4 * this.typeNumber + 17, this.modules = Array(this.moduleCount); for (let o = 0; o < this.moduleCount; o++) { this.modules[o] = Array(this.moduleCount); for (let i = 0; i < this.moduleCount; i++) this.modules[o][i] = null } this.setupPositionProbePattern(0, 0), this.setupPositionProbePattern(this.moduleCount - 7, 0), this.setupPositionProbePattern(0, this.moduleCount - 7), this.setupPositionAdjustPattern(), this.setupTimingPattern(), this.setupTypeInfo(t, e), this.typeNumber >= 7 && this.setupTypeNumber(t), this.dataCache == null && (this.dataCache = r.createData(this.typeNumber, this.errorCorrectLevel, this.dataList)), this.mapData(this.dataCache, e) }, setupPositionProbePattern: function (t, e) { for (let o = -1; o <= 7; o++) if (!(t + o <= -1 || this.moduleCount <= t + o)) for (let r = -1; r <= 7; r++)e + r <= -1 || this.moduleCount <= e + r || (this.modules[t + o][e + r] = o >= 0 && o <= 6 && (r == 0 || r == 6) || r >= 0 && r <= 6 && (o == 0 || o == 6) || o >= 2 && o <= 4 && r >= 2 && r <= 4 ? !0 : !1) }, getBestMaskPattern: function () { for (var t = 0, e = 0, o = 0; o < 8; o++) { this.makeImpl(!0, o); const r = s.getLostPoint(this); (o == 0 || t > r) && (t = r, e = o) } return e }, createMovieClip: function (t, e, o) { for (t = t.createEmptyMovieClip(e, o), this.make(), e = 0; e < this.modules.length; e++) for (var o = 1 * e, r = 0; r < this.modules[e].length; r++) { const i = 1 * r; this.modules[e][r] && (t.beginFill(0, 100), t.moveTo(i, o), t.lineTo(i + 1, o), t.lineTo(i + 1, o + 1), t.lineTo(i, o + 1), t.endFill()) } return t }, setupTimingPattern: function () { for (var t = 8; t < this.moduleCount - 8; t++) this.modules[t][6] == null && (this.modules[t][6] = t % 2 == 0); for (t = 8; t < this.moduleCount - 8; t++) this.modules[6][t] == null && (this.modules[6][t] = t % 2 == 0) }, setupPositionAdjustPattern: function () { for (let t = s.getPatternPosition(this.typeNumber), e = 0; e < t.length; e++) for (let o = 0; o < t.length; o++) { const r = t[e]; const i = t[o]; if (this.modules[r][i] == null) for (let n = -2; n <= 2; n++) for (let a = -2; a <= 2; a++) this.modules[r + n][i + a] = n == -2 || n == 2 || a == -2 || a == 2 || n == 0 && a == 0 ? !0 : !1 } }, setupTypeNumber: function (t) { for (var e = s.getBCHTypeNumber(this.typeNumber), o = 0; o < 18; o++) { var r = !t && (e >> o & 1) == 1; this.modules[Math.floor(o / 3)][o % 3 + this.moduleCount - 8 - 3] = r } for (o = 0; o < 18; o++)r = !t && (e >> o & 1) == 1, this.modules[o % 3 + this.moduleCount - 8 - 3][Math.floor(o / 3)] = r }, setupTypeInfo: function (t, e) { for (var o = s.getBCHTypeInfo(this.errorCorrectLevel << 3 | e), r = 0; r < 15; r++) { var i = !t && (o >> r & 1) == 1; r < 6 ? this.modules[r][8] = i : r < 8 ? this.modules[r + 1][8] = i : this.modules[this.moduleCount - 15 + r][8] = i } for (r = 0; r < 15; r++)i = !t && (o >> r & 1) == 1, r < 8 ? this.modules[8][this.moduleCount - r - 1] = i : r < 9 ? this.modules[8][15 - r - 1 + 1] = i : this.modules[8][15 - r - 1] = i; this.modules[this.moduleCount - 8][8] = !t }, mapData: function (t, e) { for (let o = -1, r = this.moduleCount - 1, i = 7, n = 0, a = this.moduleCount - 1; a > 0; a -= 2) for (a == 6 && a--; ;) { for (let h = 0; h < 2; h++) if (this.modules[r][a - h] == null) { let l = !1; n < t.length && (l = (t[n] >>> i & 1) == 1), s.getMask(e, r, a - h) && (l = !l), this.modules[r][a - h] = l, i--, i == -1 && (n++, i = 7) } if (r += o, r < 0 || this.moduleCount <= r) { r -= o, o = -o; break } } } }, r.PAD0 = 236, r.PAD1 = 17, r.createData = function (t, e, o) { for (var e = n.getRSBlocks(t, e), i = new a(), h = 0; h < o.length; h++) { const l = o[h]; i.put(l.mode, 4), i.put(l.getLength(), s.getLengthInBits(l.mode, t)), l.write(i) } for (h = t = 0; h < e.length; h++)t += e[h].dataCount; if (i.getLengthInBits() > 8 * t) throw Error('code length overflow. (' + i.getLengthInBits() + '>' + 8 * t + ')'); for (i.getLengthInBits() + 4 <= 8 * t && i.put(0, 4); i.getLengthInBits() % 8 != 0;)i.putBit(!1); for (;!(i.getLengthInBits() >= 8 * t) && (i.put(r.PAD0, 8), !(i.getLengthInBits() >= 8 * t));)i.put(r.PAD1, 8); return r.createBytes(i, e) }, r.createBytes = function (t, e) { for (var o = 0, r = 0, n = 0, a = Array(e.length), h = Array(e.length), l = 0; l < e.length; l++) { var u = e[l].dataCount; let d = e[l].totalCount - u; var r = Math.max(r, u); var n = Math.max(n, d); a[l] = Array(u); for (var f = 0; f < a[l].length; f++)a[l][f] = 255 & t.buffer[f + o]; for (o += u, f = s.getErrorCorrectPolynomial(d), u = new i(a[l], f.getLength() - 1).mod(f), h[l] = Array(f.getLength() - 1), f = 0; f < h[l].length; f++)d = f + u.getLength() - h[l].length, h[l][f] = d >= 0 ? u.get(d) : 0 } for (f = l = 0; f < e.length; f++)l += e[f].totalCount; for (o = Array(l), f = u = 0; r > f; f++) for (l = 0; l < e.length; l++)f < a[l].length && (o[u++] = a[l][f]); for (f = 0; n > f; f++) for (l = 0; l < e.length; l++)f < h[l].length && (o[u++] = h[l][f]); return o }, h = 4; for (var s = { PATTERN_POSITION_TABLE: [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]], G15: 1335, G18: 7973, G15_MASK: 21522, getBCHTypeInfo: function (t) { for (var e = t << 10; s.getBCHDigit(e) - s.getBCHDigit(s.G15) >= 0;)e ^= s.G15 << s.getBCHDigit(e) - s.getBCHDigit(s.G15); return (t << 10 | e) ^ s.G15_MASK }, getBCHTypeNumber: function (t) { for (var e = t << 12; s.getBCHDigit(e) - s.getBCHDigit(s.G18) >= 0;)e ^= s.G18 << s.getBCHDigit(e) - s.getBCHDigit(s.G18); return t << 12 | e }, getBCHDigit: function (t) { for (var e = 0; t != 0;)e++, t >>>= 1; return e }, getPatternPosition: function (t) { return s.PATTERN_POSITION_TABLE[t - 1] }, getMask: function (t, e, o) { switch (t) { case 0:return (e + o) % 2 == 0; case 1:return e % 2 == 0; case 2:return o % 3 == 0; case 3:return (e + o) % 3 == 0; case 4:return (Math.floor(e / 2) + Math.floor(o / 3)) % 2 == 0; case 5:return e * o % 2 + e * o % 3 == 0; case 6:return (e * o % 2 + e * o % 3) % 2 == 0; case 7:return (e * o % 3 + (e + o) % 2) % 2 == 0; default:throw Error('bad maskPattern:' + t) } }, getErrorCorrectPolynomial: function (t) { for (var e = new i([1], 0), o = 0; t > o; o++)e = e.multiply(new i([1, l.gexp(o)], 0)); return e }, getLengthInBits: function (t, e) { if (e >= 1 && e < 10) switch (t) { case 1:return 10; case 2:return 9; case h:return 8; case 8:return 8; default:throw Error('mode:' + t) } else if (e < 27) switch (t) { case 1:return 12; case 2:return 11; case h:return 16; case 8:return 10; default:throw Error('mode:' + t) } else { if (!(e < 41)) throw Error('type:' + e); switch (t) { case 1:return 14; case 2:return 13; case h:return 16; case 8:return 12; default:throw Error('mode:' + t) } } }, getLostPoint: function (t) { for (var e = t.getModuleCount(), o = 0, r = 0; e > r; r++) for (var i = 0; e > i; i++) { for (var n = 0, a = t.isDark(r, i), h = -1; h <= 1; h++) if (!(r + h < 0 || r + h >= e)) for (let s = -1; s <= 1; s++)i + s < 0 || i + s >= e || h == 0 && s == 0 || a == t.isDark(r + h, i + s) && n++; n > 5 && (o += 3 + n - 5) } for (r = 0; e - 1 > r; r++) for (i = 0; e - 1 > i; i++)n = 0, t.isDark(r, i) && n++, t.isDark(r + 1, i) && n++, t.isDark(r, i + 1) && n++, t.isDark(r + 1, i + 1) && n++, (n == 0 || n == 4) && (o += 3); for (r = 0; e > r; r++) for (i = 0; e - 6 > i; i++)t.isDark(r, i) && !t.isDark(r, i + 1) && t.isDark(r, i + 2) && t.isDark(r, i + 3) && t.isDark(r, i + 4) && !t.isDark(r, i + 5) && t.isDark(r, i + 6) && (o += 40); for (i = 0; e > i; i++) for (r = 0; e - 6 > r; r++)t.isDark(r, i) && !t.isDark(r + 1, i) && t.isDark(r + 2, i) && t.isDark(r + 3, i) && t.isDark(r + 4, i) && !t.isDark(r + 5, i) && t.isDark(r + 6, i) && (o += 40); for (i = n = 0; e > i; i++) for (r = 0; e > r; r++)t.isDark(r, i) && n++; return t = Math.abs(100 * n / e / e - 50) / 5, o + 10 * t } }, l = { glog: function (t) { if (t < 1) throw Error('glog(' + t + ')'); return l.LOG_TABLE[t] }, gexp: function (t) { for (;t < 0;)t += 255; for (;t >= 256;)t -= 255; return l.EXP_TABLE[t] }, EXP_TABLE: Array(256), LOG_TABLE: Array(256) }, u = 0; u < 8; u++)l.EXP_TABLE[u] = 1 << u; for (u = 8; u < 256; u++)l.EXP_TABLE[u] = l.EXP_TABLE[u - 4] ^ l.EXP_TABLE[u - 5] ^ l.EXP_TABLE[u - 6] ^ l.EXP_TABLE[u - 8]; for (u = 0; u < 255; u++)l.LOG_TABLE[l.EXP_TABLE[u]] = u; return i.prototype = { get: function (t) { return this.num[t] }, getLength: function () { return this.num.length }, multiply: function (t) { for (var e = Array(this.getLength() + t.getLength() - 1), o = 0; o < this.getLength(); o++) for (let r = 0; r < t.getLength(); r++)e[o + r] ^= l.gexp(l.glog(this.get(o)) + l.glog(t.get(r))); return new i(e, 0) }, mod: function (t) { if (this.getLength() - t.getLength() < 0) return this; for (var e = l.glog(this.get(0)) - l.glog(t.get(0)), o = Array(this.getLength()), r = 0; r < this.getLength(); r++)o[r] = this.get(r); for (r = 0; r < t.getLength(); r++)o[r] ^= l.gexp(l.glog(t.get(r)) + e); return new i(o, 0).mod(t) } }, n.RS_BLOCK_TABLE = [[1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], [1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], [1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], [1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], [1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], [2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], [2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], [2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], [2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], [2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], [4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], [2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], [4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], [3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], [5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12], [5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], [1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], [5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], [3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], [3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], [4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], [2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], [4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], [6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], [8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], [10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], [8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], [3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], [7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], [5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], [13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], [17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], [17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], [13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], [12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], [6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], [17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], [4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], [20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], [19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]], n.getRSBlocks = function (t, e) { const o = n.getRsBlockTable(t, e); if (void 0 == o) throw Error('bad rs block @ typeNumber:' + t + '/errorCorrectLevel:' + e); for (var r = o.length / 3, i = [], a = 0; r > a; a++) for (let h = o[3 * a + 0], s = o[3 * a + 1], l = o[3 * a + 2], u = 0; h > u; u++)i.push(new n(s, l)); return i }, n.getRsBlockTable = function (t, e) { switch (e) { case 1:return n.RS_BLOCK_TABLE[4 * (t - 1) + 0]; case 0:return n.RS_BLOCK_TABLE[4 * (t - 1) + 1]; case 3:return n.RS_BLOCK_TABLE[4 * (t - 1) + 2]; case 2:return n.RS_BLOCK_TABLE[4 * (t - 1) + 3] } }, a.prototype = { get: function (t) { return (this.buffer[Math.floor(t / 8)] >>> 7 - t % 8 & 1) == 1 }, put: function (t, e) { for (let o = 0; e > o; o++) this.putBit((t >>> e - o - 1 & 1) == 1) }, getLengthInBits: function () { return this.length }, putBit: function (t) { const e = Math.floor(this.length / 8); this.buffer.length <= e && this.buffer.push(0), t && (this.buffer[e] |= 128 >>> this.length % 8), this.length++ } }, typeof e === 'string' && (e = { text: e }), e = t.extend({}, { render: 'canvas', width: 256, height: 256, typeNumber: -1, correctLevel: 2, background: '#ffffff', foreground: '#000000' }, e), this.each(function () { let o; if (e.render == 'canvas') { o = new r(e.typeNumber, e.correctLevel), o.addData(e.text), o.make(); var i = document.createElement('canvas'); i.width = e.width, i.height = e.height; for (var n = i.getContext('2d'), a = e.width / o.getModuleCount(), h = e.height / o.getModuleCount(), s = 0; s < o.getModuleCount(); s++) for (var l = 0; l < o.getModuleCount(); l++) { n.fillStyle = o.isDark(s, l) ? e.foreground : e.background; const u = Math.ceil((l + 1) * a) - Math.floor(l * a); const d = Math.ceil((s + 1) * a) - Math.floor(s * a); n.fillRect(Math.round(l * a), Math.round(s * h), u, d) } } else for (o = new r(e.typeNumber, e.correctLevel), o.addData(e.text), o.make(), i = t('<table></table>').css('width', e.width + 'px').css('height', e.height + 'px').css('border', '0px').css('border-collapse', 'collapse').css('background-color', e.background), n = e.width / o.getModuleCount(), a = e.height / o.getModuleCount(), h = 0; h < o.getModuleCount(); h++) for (s = t('<tr></tr>').css('height', a + 'px').appendTo(i), l = 0; l < o.getModuleCount(); l++)t('<td></td>').css('width', n + 'px').css('background-color', o.isDark(h, l) ? e.foreground : e.background).appendTo(s); o = i, $(o).appendTo(this) }) } }($)), (function (t, e, o) { function r (t, e) { const o = { shapeCount: 20, timer: 100, step: 3, minSize: 50, maxSize: 150 }; const r = this; const i = $(t); $.extend(r, { wrap: i, ctx: i[0].getContext('2d'), width: i.width(), height: i.height(), timerHandle: !1, shapes: [], methodsPool: ['star'], opts: $.extend(o, e), actionCount: 0 }) }r.prototype.start = function (t) { this.buildShapes(t), this.animate() }, r.prototype.animate = function () { this.loop() }, r.prototype.renderShapes = function () { const t = this; const e = t.shapes; t.clearShapes(); for (let o = 0, r = e.length; r > o; o++) { const i = e[o]; const n = i.type; t['draw_' + n](i) } }, r.prototype.loop = function () { const t = this; this.renderShapes(), this.move(), this.timerHandle = setTimeout(function () { t.loop() }, this.opts.timer) }, r.prototype.move = function () { for (var t = this, e = t.shapes, o = t.opts.step, r = [], i = 0, n = e.length; n > i; i++) { const a = e[i]; var o = (a.directionY / a.directionX, t.opts.step); const h = a.r; let s = a.x + a.directionX * o; let l = a.y + a.directionY * o; const u = s > a.r ? s - (t.width - a.r) : a.r - s; const d = l > a.r ? l - (t.height - a.r) : a.r - l; let f = 0; let c = 0; u > 0 && d > 0 ? u > d ? (l = l > a.r ? t.height - a.r : h, c = l - a.y, f = c / a.directionY * a.directionX, s = a.x + f, a.directionY = -a.directionY) : (s = s > a.r ? t.width - a.r : h, f = s - a.x, c = f / a.directionX * a.directionY, l = a.y + c, a.directionX = -a.directionX) : u > 0 ? (s = s > a.r ? t.width - a.r : h, f = s - a.x, c = f / a.directionX * a.directionY, l = a.y + c, a.directionX = -a.directionX) : d > 0 && (l = l > a.r ? t.height - a.r : h, c = l - a.y, f = c / a.directionY * a.directionX, s = a.x + f, a.directionY = -a.directionY), a.x = s, a.y = l, r.push(a) }t.shapes = r }, r.prototype.buildShapes = function (t, e) { for (var o, r = this, i = t || r.opts.shapeCount, n = e || r.methodsPool, a = n.length, h = 0; i > h; h++)o = Math.floor(Math.random() * a), r.shapes.push(r.buildShape(n[o])) }, r.prototype.buildShape = function (t) { return this['build_shape_' + t]() }, r.prototype.popShape = function (t) { const e = this.shapes.length; let o = t > e ? e : t; o = e - o, this.shapes = this.shapes.slice(0, o), this.opts.shapeCount = this.opts.shapeCount - t }, r.prototype.pushShape = function (t, e) { const o = this; const r = e || o.methodsPool; const i = r.length; const n = Math.floor(Math.random() * i); o.shapes.push($.extend(o.buildShape(r[n]), t)), this.opts.shapeCount++ }, r.prototype.stop = function () { clearTimeout(this.timerHandle), this.clearShapes() }, r.prototype.clearShapes = function () { this.ctx.clearRect(0, 0, this.width, this.height) }, r.prototype.build_shape_bubble = function () { const t = this; const e = t.opts; const o = Math.floor(Math.random() * (e.maxSize - e.minSize)) + e.minSize; const r = 2 * o; const i = t.width > r ? t.width : r + 1; const n = t.height > r ? t.height : r + 1; const a = o + Math.floor(Math.random() * (i - r)); const h = o + Math.floor(Math.random() * (n - r)); const s = (Math.floor(7 * Math.random()) - 3) / 3; const l = (Math.floor(7 * Math.random()) - 3) / 3; const u = ['rgba(156,183,52,.25)', 'rgba(227,163,26,.25)', 'rgba(217,84,56,.25)', 'rgba(4,80,150,.25)', 'rgba(122,24,105,.25)']; const d = u.length; const f = Math.floor(Math.random() * d); const c = { x: a, y: h, r: o, directionX: s, directionY: l, type: 'bubble', fillStyle: u[f] }; return c }, r.prototype.draw_bubble = function (t) { const e = this.ctx; e.beginPath(), e.fillStyle = t.fillStyle, e.arc(t.x, t.y, t.r, 0, 2 * Math.PI, !0), e.fill(), e.closePath() }, r.prototype.draw_balloon = function (t) { const e = this.ctx; e.beginPath(), e.fillStyle = t.fillStyle, e.arc(t.x, t.y, t.r, 0, 2 * Math.PI, !0), e.fill(), e.closePath(), e.beginPath(), e.moveTo(this.width / 2, this.height - 20), e.lineTo(t.x, t.y), e.strokeStyle = t.strokeStyle, e.stroke(), e.closePath() }, r.prototype.build_shape_balloon = function () { const t = this; const e = t.opts; const o = Math.floor(Math.random() * (e.maxSize - e.minSize)) + e.minSize; const r = 2 * o; const i = t.width > r ? t.width : r + 1; const n = t.height > r ? t.height : r + 1; const a = o + Math.floor(Math.random() * (i - r)); const h = o + Math.floor(Math.random() * (n - r)); const s = (Math.floor(7 * Math.random()) - 3) / 3; const l = (Math.floor(7 * Math.random()) - 3) / 3; const u = ['rgba(156,183,52,.25)', 'rgba(227,163,26,.25)', 'rgba(217,84,56,.25)', 'rgba(4,80,150,.25)', 'rgba(122,24,105,.25)']; const d = u.length; const f = Math.floor(Math.random() * d); const c = { x: a, y: h, r: o, directionX: s, directionY: l, type: 'balloon', strokeStyle: u[f], fillStyle: u[f] }; return c }, r.prototype.draw_light = function (t) { const e = this.ctx; e.beginPath(), e.moveTo(20, 20), e.lineTo(t.x, t.y), e.strokeStyle = t.strokeStyle, e.stroke(), e.closePath() }, r.prototype.build_shape_light = function () { const t = this; const e = t.opts; const o = Math.floor(Math.random() * (e.maxSize - e.minSize)) + e.minSize; const r = 2 * o; const i = t.width > r ? t.width : r + 1; const n = t.height > r ? t.height : r + 1; const a = o + Math.floor(Math.random() * (i - r)); const h = o + Math.floor(Math.random() * (n - r)); const s = (Math.floor(7 * Math.random()) - 3) / 3; const l = (Math.floor(7 * Math.random()) - 3) / 3; const u = ['rgba(156,183,52,.25)', 'rgba(227,163,26,.25)', 'rgba(217,84,56,.25)', 'rgba(4,80,150,.25)', 'rgba(122,24,105,.25)']; const d = u.length; const f = Math.floor(Math.random() * d); const c = { x: a, y: h, r: o, directionX: s, directionY: l, type: 'light', strokeStyle: u[f] }; return c }, r.prototype.build_shape_heart = function () { const t = this; const e = t.opts; const o = Math.floor(Math.random() * (e.maxSize - e.minSize)) + e.minSize; const r = 2 * o; const i = t.width > r ? t.width : r + 1; const n = t.height > r ? t.height : r + 1; const a = o + Math.floor(Math.random() * (i - r)); const h = o + Math.floor(Math.random() * (n - r)); const s = 2 * Math.random() - 1; const l = 2 * Math.random() - 1; const u = { x: a, y: h, r: o, directionX: s, directionY: l, type: 'heart', fillStyle: 'rgba(207,13,31,.25)' }; return u }, r.prototype.draw_heart = function (t) { const e = this; const o = e.ctx; const r = t.r / 75; const i = t.x; const n = t.y; const a = i - t.r; const h = n - t.r; o.beginPath(), o.fillStyle = t.fillStyle, o.moveTo(a + 75 * r, h + 40 * r), o.bezierCurveTo(a + 75 * r, h + 37 * r, a + 70 * r, h + 25 * r, a + 50 * r, h + 25 * r), o.bezierCurveTo(a + 20 * r, h + 25 * r, a + 20 * r, h + 62.5 * r, a + 20 * r, h + 62.5 * r), o.bezierCurveTo(a + 20 * r, h + 80 * r, a + 40 * r, h + 102 * r, a + 75 * r, h + 120 * r), o.bezierCurveTo(a + 110 * r, h + 102 * r, a + 130 * r, h + 80 * r, a + 130 * r, h + 62.5 * r), o.bezierCurveTo(a + 130 * r, h + 62.5 * r, a + 130 * r, h + 25 * r, a + 100 * r, h + 25 * r), o.bezierCurveTo(a + 85 * r, h + 25 * r, a + 75 * r, h + 37 * r, a + 75 * r, h + 40 * r), o.fill(), o.closePath() }, r.prototype.build_shape_star = function () { const t = this; const e = t.opts; const o = Math.floor(Math.random() * (e.maxSize - e.minSize)) + e.minSize; const r = 2 * o; const i = t.width > r ? t.width : r + 1; const n = t.height > r ? t.height : r + 1; const a = o + Math.floor(Math.random() * (i - r)); const h = o + Math.floor(Math.random() * (n - r)); const s = 2 * Math.random() - 1; const l = 2 * Math.random() - 1; const u = 5 + Math.floor(5 * Math.random()); const d = ['rgba(156,183,52,.25)', 'rgba(227,163,26,.25)', 'rgba(217,84,56,.25)', 'rgba(4,80,150,.25)', 'rgba(122,24,105,.25)']; const f = d.length; const c = Math.floor(Math.random() * f); const g = { x: a, y: h, r: o, outerR: o, innerR: o / 2, spike: u, directionX: s, directionY: l, type: 'star' }; return u === 5 ? g.fillStyle = 'rgba(207,13,31,.25)' : g.strokeStyle = d[c], g }, r.prototype.draw_star = function (t) { let e; let o; let r = Math.PI / 2 * 3; const n = t.x; const a = t.y; const h = t.spike; const s = Math.PI / h; const l = this; const u = l.ctx; const d = t.outerR; const f = t.innerR; for (t.strokeStyle ? u.strokeStyle = t.strokeStyle : u.fillStyle = t.fillStyle, u.beginPath(), u.moveTo(n, a - d), i = 0; i < h; i++)e = n + Math.cos(r) * d, o = a + Math.sin(r) * d, u.lineTo(e, o), r += s, e = n + Math.cos(r) * f, o = a + Math.sin(r) * f, u.lineTo(e, o), r += s; u.lineTo(n, a - d), t.strokeStyle ? u.stroke() : u.fill(), u.closePath() }, r.prototype.moveTo = function (t) { for (var e = this, o = e.shapes, r = t, i = [], n = 0, a = o.length; a > n; n++) { const h = o[n]; const s = r[n]; const l = (h.x + s.x) / 2; const u = (h.y + s.y) / 2; i.push($.extend(h, { x: l, y: u })) }e.shapes = i }, r.prototype.buildPosArrayFromText = function (t, e) { const o = this; const r = o.ctx; const i = o.width; const n = o.height; const a = t; const h = e || {}; const s = (h.shapeSize || 20, h.scanDistance || 5); const l = h.fontSize || 200; const u = h.fontFamily || 'sans-serif'; const d = h.top || 20; r.textAlign = h.textAlign || 'start', r.textBaseline = h.textBaseline || 'top', o.clearShapes(), r.font = l + 'px ' + u, r.fillStyle = 'red', r.fillText(a, 20, d); for (var f = r.getImageData(0, 0, i, n), c = f.data, g = [], p = (Math.floor(i / s) * Math.floor(n / s), 0); i > p; p += s) for (let m = 0; n > m; m += s) { const v = m * i + p; const y = c[4 * v]; y && g.push({ x: p, y: m }) } return o.clearShapes(), g }, t.Shapes = r }(window, document)), $(function () { function t () { const t = $('body').hasClass('home') || $('body').hasClass('tag'); const o = $(t ? 'h1, #footer-widgets h3, .post-title h2' : 'h1, #footer-widgets h3, h2'); let r = '<div id="sidenav"><div id="sidenav-inner"><ul>'; o.each(function (t, e) { const o = $(this); o.before('<a href="#" name="nav-' + t + '"></a>'), r += '<li><a href="#nav-' + t + '">' + o.text() + '</a></li>' }), $('#header a').prop('name', 'top'), $('body').append(r + '</ul><p><a href="#top">&uarr;top</a></p></div></div>'), e(), $('#sidenav').hover(function () { $(this).addClass('hover'), e() }, function () { $(this).removeClass('hover'), $('#sidenav').removeClass('scroll') }) } function e () { const t = 0.9 * $(window).height(); sn = $('#sidenav-inner').height(), sn > t ? $('#sidenav').addClass('scroll') : $('#sidenav').removeClass('scroll') } function o () { const t = d.wrap; const e = t.width(); const o = t.height(); t.prop({ width: e, height: o }), d.width = e, d.height = o, e < 768 && (d.stop(), clearTimeout(d.timerHandle0)) } function r () { const t = $('body'); const e = t.width(); const r = t.height(); (l !== e || u !== r) && (o(), l = e, u = r) } function i () { let t = location.href.split('#')[0]; t === h5.host + '/' && (t = h5.host); const e = $('#nav a[href="' + t + '"]').parent(); e.parents('li').length ? e.parents('li').addClass('active') : e.addClass('active') } function n (t, e) { let o; const r = function () { t(), o = setTimeout(r, e) }; o = setTimeout(r, e) } var a = !1; const h = $('#cbg')[0]; const s = h.getContext ? !0 : !1; var a = 'ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch; var l = $('body').width(); var u = $('body').height(); var d = null; $('.centered').addClass('container'), $('[title]').tooltip({ placement: 'bottom' }), i(), n(r, 1500); const f = $('pre'); const c = ($('code'), a ? '' : 'contentEditable="true"'); if (f.each(function () { const t = $(this); const e = t.html().replace(/\\t/g, '    '); t.html(e), t.addClass('prettyprint lang-' + t.prop('lang')).wrapInner('<code ' + c + ' />') }), prettyPrint(), s && $('#qr1').qrcode({ width: 128, height: 128, text: window.location.href }), $('#no-sidenav').length || t(), !$('#no-bubble').length && s) { d = new Shapes('#cbg', {}), d.methodsPool = ['light'], o(), window.shapesInst = d, d.start(), $(window).on('resize', o), $('#footer .addBubble').click(function () { d.pushShape({}) }), $('#footer .stop').click(function () { const t = $(this); t.hasClass('off') ? (t.removeClass('off').text('Stop it'), d.start()) : (t.addClass('off').text('Continue'), d.clearShapes(), d.stop()) }), $('#footer .faster').click(function () { d.opts.step++, d.opts.step > 100 && (d.opts.step = 100) }); const g = ['star', 'bubble', 'heart', 'light', 'balloon']; const p = g.concat(['random']); const m = p.length; let v = 2; $('#footer .fish, .change-shape').click(function () { d.stop(); const t = p[v]; d.methodsPool = t !== 'random' ? [t] : g, d.shapes = [], d.start(), v = (v + 1 + m) % m }), $('.shapes-to-text').click(function () { function t () { function t () { d.moveTo(o), d.renderShapes(), d.timerHandle0 = setTimeout(function () { return d.arriveTarget ? clearTimeout(d.timerHandle0) : void t() }, d.opts.timer) }clearTimeout(d.timerHandle), t() }d.stop(), clearTimeout(d.timerHandle0), d.methodsPool.length === 1 && d.methodsPool[0] === 'light' && (d.methodsPool = g); const e = ('' + Math.random()).slice(2, 6); $(this).text(e); var o = d.buildPosArrayFromText(e, { fontSize: 100, top: 100 }); d.opts.shapeCount = o.length, d.opts.minSize = 5, d.opts.maxSize = 5, d.shapes = [], d.start(), setTimeout(t, 1e3) }) } else $('.exp').hide() })
